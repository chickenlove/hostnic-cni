// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	AllocateNicRequest
	AllocateNicResponse
	FreeNicRequest
	FreeNicResponse
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AllocateNicRequest struct {
	AutoAssignGateway bool `protobuf:"varint,1,opt,name=autoAssignGateway" json:"autoAssignGateway,omitempty"`
}

func (m *AllocateNicRequest) Reset()                    { *m = AllocateNicRequest{} }
func (m *AllocateNicRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateNicRequest) ProtoMessage()               {}
func (*AllocateNicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllocateNicRequest) GetAutoAssignGateway() bool {
	if m != nil {
		return m.AutoAssignGateway
	}
	return false
}

type AllocateNicResponse struct {
	Nicid      string `protobuf:"bytes,1,opt,name=nicid" json:"nicid,omitempty"`
	Nicip      string `protobuf:"bytes,2,opt,name=nicip" json:"nicip,omitempty"`
	Niccidr    string `protobuf:"bytes,3,opt,name=niccidr" json:"niccidr,omitempty"`
	Nicgateway string `protobuf:"bytes,4,opt,name=nicgateway" json:"nicgateway,omitempty"`
}

func (m *AllocateNicResponse) Reset()                    { *m = AllocateNicResponse{} }
func (m *AllocateNicResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateNicResponse) ProtoMessage()               {}
func (*AllocateNicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllocateNicResponse) GetNicid() string {
	if m != nil {
		return m.Nicid
	}
	return ""
}

func (m *AllocateNicResponse) GetNicip() string {
	if m != nil {
		return m.Nicip
	}
	return ""
}

func (m *AllocateNicResponse) GetNiccidr() string {
	if m != nil {
		return m.Niccidr
	}
	return ""
}

func (m *AllocateNicResponse) GetNicgateway() string {
	if m != nil {
		return m.Nicgateway
	}
	return ""
}

type FreeNicRequest struct {
	Nicid string `protobuf:"bytes,1,opt,name=nicid" json:"nicid,omitempty"`
}

func (m *FreeNicRequest) Reset()                    { *m = FreeNicRequest{} }
func (m *FreeNicRequest) String() string            { return proto.CompactTextString(m) }
func (*FreeNicRequest) ProtoMessage()               {}
func (*FreeNicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FreeNicRequest) GetNicid() string {
	if m != nil {
		return m.Nicid
	}
	return ""
}

type FreeNicResponse struct {
}

func (m *FreeNicResponse) Reset()                    { *m = FreeNicResponse{} }
func (m *FreeNicResponse) String() string            { return proto.CompactTextString(m) }
func (*FreeNicResponse) ProtoMessage()               {}
func (*FreeNicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*AllocateNicRequest)(nil), "messages.AllocateNicRequest")
	proto.RegisterType((*AllocateNicResponse)(nil), "messages.AllocateNicResponse")
	proto.RegisterType((*FreeNicRequest)(nil), "messages.FreeNicRequest")
	proto.RegisterType((*FreeNicResponse)(nil), "messages.FreeNicResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nicservices service

type NicservicesClient interface {
	AllocateNic(ctx context.Context, in *AllocateNicRequest, opts ...grpc.CallOption) (*AllocateNicResponse, error)
	FreeNic(ctx context.Context, in *FreeNicRequest, opts ...grpc.CallOption) (*FreeNicResponse, error)
}

type nicservicesClient struct {
	cc *grpc.ClientConn
}

func NewNicservicesClient(cc *grpc.ClientConn) NicservicesClient {
	return &nicservicesClient{cc}
}

func (c *nicservicesClient) AllocateNic(ctx context.Context, in *AllocateNicRequest, opts ...grpc.CallOption) (*AllocateNicResponse, error) {
	out := new(AllocateNicResponse)
	err := grpc.Invoke(ctx, "/messages.Nicservices/AllocateNic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nicservicesClient) FreeNic(ctx context.Context, in *FreeNicRequest, opts ...grpc.CallOption) (*FreeNicResponse, error) {
	out := new(FreeNicResponse)
	err := grpc.Invoke(ctx, "/messages.Nicservices/FreeNic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nicservices service

type NicservicesServer interface {
	AllocateNic(context.Context, *AllocateNicRequest) (*AllocateNicResponse, error)
	FreeNic(context.Context, *FreeNicRequest) (*FreeNicResponse, error)
}

func RegisterNicservicesServer(s *grpc.Server, srv NicservicesServer) {
	s.RegisterService(&_Nicservices_serviceDesc, srv)
}

func _Nicservices_AllocateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicservicesServer).AllocateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Nicservices/AllocateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicservicesServer).AllocateNic(ctx, req.(*AllocateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nicservices_FreeNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicservicesServer).FreeNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Nicservices/FreeNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicservicesServer).FreeNic(ctx, req.(*FreeNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nicservices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Nicservices",
	HandlerType: (*NicservicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateNic",
			Handler:    _Nicservices_AllocateNic_Handler,
		},
		{
			MethodName: "FreeNic",
			Handler:    _Nicservices_FreeNic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x72, 0x8b, 0x95, 0x9c,
	0xb8, 0x84, 0x1c, 0x73, 0x72, 0xf2, 0x93, 0x13, 0x4b, 0x52, 0xfd, 0x32, 0x93, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x74, 0xb8, 0x04, 0x13, 0x4b, 0x4b, 0xf2, 0x1d, 0x8b, 0x8b, 0x33,
	0xd3, 0xf3, 0xdc, 0x13, 0x4b, 0x52, 0xcb, 0x13, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x82,
	0x30, 0x25, 0x94, 0xaa, 0xb9, 0x84, 0x51, 0xcc, 0x28, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x12,
	0xe1, 0x62, 0xcd, 0xcb, 0x4c, 0xce, 0x4c, 0x01, 0x6b, 0xe4, 0x0c, 0x82, 0x70, 0x60, 0xa2, 0x05,
	0x12, 0x4c, 0x08, 0xd1, 0x02, 0x21, 0x09, 0x2e, 0xf6, 0xbc, 0xcc, 0xe4, 0xe4, 0xcc, 0x94, 0x22,
	0x09, 0x66, 0xb0, 0x38, 0x8c, 0x2b, 0x24, 0xc7, 0xc5, 0x95, 0x97, 0x99, 0x9c, 0x0e, 0x75, 0x03,
	0x0b, 0x58, 0x12, 0x49, 0x44, 0x49, 0x8d, 0x8b, 0xcf, 0xad, 0x28, 0x15, 0xd9, 0xf1, 0x58, 0xed,
	0x55, 0x12, 0xe4, 0xe2, 0x87, 0xab, 0x83, 0x38, 0xd0, 0x68, 0x26, 0x23, 0x17, 0xb7, 0x5f, 0x66,
	0x72, 0x71, 0x6a, 0x51, 0x59, 0x66, 0x72, 0x6a, 0xb1, 0x90, 0x17, 0x17, 0x37, 0x92, 0x3f, 0x84,
	0x64, 0xf4, 0x60, 0xa1, 0xa4, 0x87, 0x19, 0x44, 0x52, 0xb2, 0x38, 0x64, 0xa1, 0x9e, 0xb7, 0xe3,
	0x62, 0x87, 0x5a, 0x27, 0x24, 0x81, 0x50, 0x89, 0xea, 0x52, 0x29, 0x49, 0x2c, 0x32, 0x10, 0xfd,
	0x49, 0x6c, 0xe0, 0x88, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xde, 0x22, 0x0d, 0xae, 0xb9,
	0x01, 0x00, 0x00,
}
